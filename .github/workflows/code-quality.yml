name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  golangci-lint:
    name: Go Code Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [scanner, api]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ${{ matrix.service }}
        args: --timeout=5m

  python-quality:
    name: Python Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit
        cd nlp && pip install -r requirements.txt
    
    - name: Run Black (formatting)
      working-directory: ./nlp
      run: black --check --diff app/
    
    - name: Run isort (import sorting)
      working-directory: ./nlp
      run: isort --check-only --diff app/
    
    - name: Run flake8 (linting)
      working-directory: ./nlp
      run: flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run mypy (type checking)
      working-directory: ./nlp
      run: mypy app/ --ignore-missing-imports
    
    - name: Run bandit (security linting)
      working-directory: ./nlp
      run: bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Upload bandit report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: nlp/bandit-report.json

  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run Prettier (format check)
      working-directory: ./frontend
      run: npm run format:check
    
    - name: Type check
      working-directory: ./frontend
      run: npm run type-check

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    # Run tests with coverage
    - name: Run Go tests with coverage
      run: |
        cd scanner && go test -coverprofile=coverage.out -covermode=atomic ./...
        cd ../api && go test -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Run Python tests with coverage
      run: |
        cd nlp
        pip install pytest pytest-cov
        pip install -r requirements.txt
        pytest --cov=app --cov-report=xml
    
    - name: Run Frontend tests with coverage
      run: |
        cd frontend
        npm ci
        npm test -- --coverage --watchAll=false
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  commitlint:
    name: Commit Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install commitlint
      run: |
        npm install -g @commitlint/config-conventional @commitlint/cli
    
    - name: Validate current commit (last commit) with commitlint
      run: npx commitlint --from HEAD~1 --to HEAD --verbose

  dependency-update:
    name: Dependency Update Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Check Go module updates
      run: |
        cd scanner && go list -u -m all > go-updates.txt
        cd ../api && go list -u -m all >> ../scanner/go-updates.txt
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Check npm updates
      working-directory: ./frontend
      run: |
        npm ci
        npx npm-check-updates > npm-updates.txt
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Check Python updates
      working-directory: ./nlp
      run: |
        pip install pip-check
        pip-check > pip-updates.txt || true
    
    - name: Upload update reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-updates
        path: |
          scanner/go-updates.txt
          frontend/npm-updates.txt
          nlp/pip-updates.txt