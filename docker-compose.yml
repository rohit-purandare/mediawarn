version: '3.8'

# Improved startup orchestration with proper health checks
services:
  mediawarn:
    image: ghcr.io/rohit-purandare/mediawarn:latest
    container_name: mediawarn
    environment:
      - SERVICE=all
      - DATABASE_URL=postgresql://cws:password@postgres:5432/cws
      - REDIS_URL=redis://redis:6379
      - SCAN_INTERVAL=300
      - WORKERS=4
      - NLP_WORKERS=2
      - PORT=8000
      - REACT_APP_API_URL=http://localhost:8000
      # Logging configuration (industry standard)
      - LOG_LEVEL=INFO
      - NODE_ENV=production
      - GIN_MODE=release
      - APP_VERSION=1.0.0
      # Database connection optimization
      - POSTGRES_MAX_RETRIES=30
      - POSTGRES_RETRY_DELAY=2
    volumes:
      - ./data:/data                    # Auto-created by Docker Compose
      - ./config:/app/config:ro         # Auto-created by Docker Compose
      - nlp_models:/models              # Named volume (auto-created)
      # Mount your media directories here, e.g.:
      # - /path/to/your/media:/media:ro
    ports:
      - "7219:7219"
      - "8000:8000"
      - "8002:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: cws-postgres
    environment:
      - POSTGRES_DB=cws
      - POSTGRES_USER=cws
      - POSTGRES_PASSWORD=password
      # Reduce startup time and improve reliability
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Note: Database will be initialized by the application
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cws -d cws"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: cws-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 6
      start_period: 10s
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  nlp_models: